#!/bin/python3
import os
import sys
import argparse
import logging
import shutil
from subprocess import call
import tempfile

# ERROR MESSSAGES
E_NOT_MANAGED = "{file} not managed by dmg"
E_FILE_ARG_MISSING = "file argument required for {operation}"
E_PARSE_FAIL = "{file}: parsing failed"
I_DEPLOYING = "deploying {file}"
I_PARSE_OK = "{file}: parsing OK"

VERSION = "0.1.3"

def deploy(data: bytes, output_path: str) -> None:
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    f = open(output_path, 'wb')
    f.write(data)
    f.close()

def dmg_parse(path: str, hostname: str, display: str = None) -> bytes:
    dest_hostnames = None
    output_buffer = []
    parse_stack: list[tuple[set[str], str]] = []
    lc = 0
    with open(path, "r") as fp:
        while True:
            line = fp.readline()
            lc+=1
            if not line:
                break
            if line.startswith("##$"):
                # "##$ hosts: host1, host2" -> directive = "hosts", data = "host1, host2"
                directive = ""
                data = None
                v = line[line.find("##$")+3:].strip().split(":", 1)
                directive = v[0]
                if len(v) == 2:
                    data = v[1]
                match directive.strip():
                    case "hosts":
                        if not dest_hostnames:
                            dest_hostnames = set(map(lambda x: x.strip(), data.split(",")))
                            logging.debug(f"{display} is for {dest_hostnames}")
                            if not hostname in dest_hostnames:
                                logging.info(f"{display} not for me, skipping")
                                return None
                        else: #hostnames already found
                            logging.error(f"{display}:L{lc} unexpected hosts directive - hosts already declared")
                            return None
                    case "only":
                        if dest_hostnames:
                            hostnames = set(map(lambda x: x.strip(), data.split(",")))
                            parse_stack.append( (hostnames, "only"))
                        else:
                            logging.error(f"{display}:L{lc} unexpected only directive - hosts not defined yet")
                            return None
                    case "not":
                        if dest_hostnames:
                            hostnames = set(map(lambda x: x.strip(), data.split(",")))
                            parse_stack.append( (hostnames, "not") )
                        else:
                            logging.error(f"{display}:L{lc} unexpected not directive - hosts not defined yet")
                            return None
                    case "end":
                        if parse_stack:
                           parse_stack.pop()
                        else:
                            logging.error(f"{display}:L{lc} unexpected end directive")
                            return None
                    case _:
                        logging.warning(f"{display}:L{lc} unknown directive {directive}")    
                        return None
            elif parse_stack: #stack non-empty
                parsing_for, mode = parse_stack[-1]
                if mode == None or (mode == "not" and hostname not in parsing_for) or (mode == "only" and hostname in parsing_for):
                    output_buffer.append(line)
            else: #stack empty
                output_buffer.append(line)
            
    if parse_stack:
        logging.error(f"{display}:L{lc} unexpected eof (not enough end directives)")
        return None
    return "".join(output_buffer).encode("utf-8")
            

if __name__ == "__main__":

    if sys.version_info.minor < 10:
        print("python 3.10 or greater is required to use this software")
        os._exit(1)

    agp = argparse.ArgumentParser(description=f"dmg: dotfile manager (v{VERSION})")
    #flags
    agp.add_argument("-l", dest="loglevel", help="Set the log level.", type=str, default="info", choices=["info", "warning", "error", "debug"])
    agp.add_argument("--dry", dest="dryrun", help="Dry run: parse normally, but do not write anything to disk.", action=argparse.BooleanOptionalAction)
    #actions
    agp.add_argument("-a", dest="action", help="Action to take.", choices=["deploy", "import", "parse", "edit", "delete"], required=True)
    agp.add_argument("-f", dest="file", help="Generic file argument. Required for import, parse, edit, and delete.")
    agp.add_argument("-s", dest="dir", help="Source directory. May use DMG_ROOT env variable instead.", type=str, default=os.path.expandvars(os.getenv("DMG_ROOT")))
    args = agp.parse_args()
    logging.basicConfig(level=args.loglevel.upper())

    DMG_DIR = args.dir
    if not DMG_DIR:
        logging.error("DMG_ROOT not set and -s option not passed, exiting")
        os._exit(1)

    logging.debug(f"DMG_ROOT is set to {DMG_DIR}")
    objects = os.listdir(DMG_DIR)
    HOSTNAME = os.uname()[1]
    match args.action:
        case "deploy":
            if not args.file: #all files
                for root, dirs, files in os.walk(DMG_DIR):
                    for fname in files:
                        fpath = os.path.join(root, fname)
                        dest = fpath[len(DMG_DIR):]
                        fcontent = dmg_parse(fpath, HOSTNAME, display=dest)
                        logging.debug(fpath+" -> "+dest)
                        if not fcontent:
                            #parser failed
                            logging.error(E_PARSE_FAIL.format(file=fpath))
                        elif not args.dryrun:
                            logging.info(I_DEPLOYING.format(file=dest))
                            deploy(fcontent, dest)
                        else:
                            logging.info(I_PARSE_OK.format(file=fpath))
            else: #one file
                fp = DMG_DIR + "/" + os.path.abspath(args.file)
                if not os.path.exists(fp):
                    logging.error(E_NOT_MANAGED.format(file=args.file))
                dest = fp[len(DMG_DIR):]
                fcontent = dmg_parse(fp, HOSTNAME, display=dest)
                if not fcontent:
                    logging.error(E_PARSE_FAIL.format(file=fp))
                elif not args.dryrun:
                    logging.info(I_DEPLOYING.format(file=dest))
                    deploy(fcontent, dest)
                else:
                    logging.info(I_PARSE_OK.format(file=fp))
                
        case "import":
            if not args.file:
                logging.error(E_FILE_ARG_MISSING.format(operation=args.action))
                os._exit(1)
            else:
                if not args.dryrun:
                    if os.path.exists(args.file):
                        dest = DMG_DIR + "/" + os.path.abspath(args.file)
                        os.makedirs(os.path.dirname(dest), exist_ok=True)
                        shutil.copy(args.file, dest)
                        #TODO: check if file exists already
                        logging.info(f"imported {args.file} -> {dest}")
                    else:
                        logging.error(f"import failed: file {args.file} does not exist")
                        os._exit(1)
        case "parse":
            if not args.file:
                logging.error(E_FILE_ARG_MISSING.format(operation=args.action))
                os._exit(1)
            else:
                if not os.path.exists(args.file):
                    logging.error(f"{args.file} does not exist")
                    os._exit(1)
                output = dmg_parse(args.file, HOSTNAME, args.file)
                if not output:
                    logging.error(f"{args.file}: parsing failed")
                    os._exit(1)
                sys.stdout.buffer.write(output)
        case "edit":
            # args.file - a potentially relative path passed in by the user
            # fp - the path where args.file would be stored, if it was managed by dmg
            EDITOR = os.environ.get("EDITOR", "vim")
            if not args.file:
                logging.error(E_FILE_ARG_MISSING.format(operation=args.action))
                os._exit(1)
            fp = DMG_DIR + "/" + os.path.abspath(args.file)
            if not os.path.exists(fp):
                logging.error(E_NOT_MANAGED.format(file=os.path.abspath(args.file)))
                os._exit(1)
            orig_fd = open(fp, 'r')
            init_content = orig_fd.read()
            orig_fd.close()
            with tempfile.NamedTemporaryFile(suffix=".tmp") as tf:
                tf.write(init_content.encode("utf-8"))
                tf.flush()
                call([EDITOR, tf.name])
                tf.seek(0)
                data = dmg_parse(tf.name, HOSTNAME, display=args.file)
                if data:
                    if not args.dryrun:
                        deploy(data, os.path.abspath(args.file)) #deploy to new location
                        fd = open(fp, 'wb') 
                        fd.write(tf.read())
                        fd.close() #overwrite original
                    logging.info(f"{args.file} parsed OK and deployed")
                else:
                    logging.error(f"failed to parse {args.file}")
        case "delete":
            if not args.file:
                logging.error(E_FILE_ARG_MISSING.format(operation=args.action))
                os._exit(1)
            absp = os.path.abspath(args.file)
            fp = DMG_DIR + "/" + absp
            if not os.path.exists(fp):
                logging.error(E_NOT_MANAGED.format(file=absp))
                os._exit(1)
            if not args.dryrun:
                os.remove(fp)
            logging.info(f"file {absp} will no longer be managed by dmg")
        case _:
            logging.error(f"unknown action: {args.action}")
